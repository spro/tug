#!/usr/bin/env node

// Generated by CoffeeScript 1.7.1
(function() {
  var coerce_sshconf_host, conf, conf_filename, conf_lines, connect_to_host, fs, key_matched, line, path, resolvePath, script_name, script_oneline, ssh, ssh_conn, _i, _key, _len, _val;

  fs = require('fs');

  path = require('path');

  ssh = require('sshconf-stream');

  ssh_conn = new require('ssh2')();

  resolvePath = function(string) {
    if (string.substr(0, 1) === '~') {
      string = process.env.HOME + string.substr(1);
    }
    return path.resolve(string);
  };

  script_name = process.argv[2];

  conf_filename = resolvePath("~/.tug/" + script_name + ".tug");

  conf = {};

  conf_lines = fs.readFileSync(conf_filename).toString().trim().split('\n');

  _key = null;

  _val = '';

  for (_i = 0, _len = conf_lines.length; _i < _len; _i++) {
    line = conf_lines[_i];
    if (key_matched = line.match(/^\[(.+)\]$/)) {
      if ((_key != null) && (_val != null)) {
        conf[_key] = _val.trim();
      }
      _val = '';
      _key = key_matched[1];
    } else {
      if (_key != null) {
        _val += line + '\n';
      }
    }
  }

  if ((_key != null) && (_val != null)) {
    conf[_key] = _val.trim();
  }

  script_oneline = conf.script.trim().split('\n').join(' && ');

  fs.createReadStream(resolvePath('~/.ssh/config')).pipe(ssh.createParseStream()).on('data', function(_host_data) {
    var host_data;
    host_data = coerce_sshconf_host(_host_data);
    if (host_data.host === conf.host) {
      return connect_to_host(host_data);
    }
  });

  coerce_sshconf_host = function(host_data) {
    var coerced_host_data, k, v, _ref;
    coerced_host_data = {};
    _ref = host_data.keywords;
    for (k in _ref) {
      v = _ref[k];
      coerced_host_data[k.toLowerCase()] = v[0];
    }
    return coerced_host_data;
  };

  connect_to_host = function(host_data) {
    var privateKey, privateKeyFilename;
    privateKeyFilename = host_data.identityfile || '~/.ssh/id_rsa';
    privateKey = require('fs').readFileSync(resolvePath(privateKeyFilename));
    ssh_conn.connect({
      host: host_data.hostname,
      username: host_data.user || process.env.USER,
      privateKey: privateKey
    });
    return ssh_conn.on('ready', function() {
      return ssh_conn.exec(script_oneline, function(err, stream) {
        stream.on('data', function(data) {
          return console.log(data.toString());
        });
        return stream.on('exit', function() {
          return ssh_conn.end();
        });
      });
    });
  };

}).call(this);
