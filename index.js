#!/usr/bin/env node

// Generated by CoffeeScript 1.7.1
(function() {
  var argv, argv_hosts, coerce_sshconf_host, connect_to_host, execute_steps, fs, key_matched, line, minimist, path, resolvePath, ssh, step_script, tugfile, tugfile_filename, tugfile_keys, tugfile_lines, tugfile_name, _i, _key, _len, _val,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  path = require('path');

  minimist = require('minimist');

  ssh = require('sshconf-stream');

  argv = minimist(process.argv.slice(2));

  resolvePath = function(string) {
    if (string.substr(0, 1) === '~') {
      string = process.env.HOME + string.substr(1);
    }
    return path.resolve(string);
  };

  tugfile_name = argv._[0];

  tugfile_filename = resolvePath("~/.tug/" + tugfile_name + ".tug");

  tugfile = {};

  tugfile_keys = [];

  tugfile_lines = fs.readFileSync(tugfile_filename).toString().trim().split('\n');

  _key = null;

  _val = '';

  for (_i = 0, _len = tugfile_lines.length; _i < _len; _i++) {
    line = tugfile_lines[_i];
    if (key_matched = line.match(/^\[(.+)\]$/)) {
      if ((_key != null) && (_val != null)) {
        tugfile_keys.push(_key);
        tugfile[_key] = _val.trim();
      }
      _val = '';
      _key = key_matched[1];
    } else {
      if (_key != null) {
        _val += line + '\n';
      }
    }
  }

  if ((_key != null) && (_val != null)) {
    tugfile_keys.push(_key);
    tugfile[_key] = _val.trim();
  }

  step_script = function(step_name) {
    return tugfile['step ' + step_name].trim().split('\n').join(' && ');
  };

  tugfile.steps = tugfile_keys.filter(function(k) {
    return k.slice(0, 4) === 'step';
  }).map(function(s) {
    return s.slice(5);
  });

  tugfile.hosts = tugfile.hosts.trim().split('\n');

  if ((argv.hosts != null) || (argv.h != null)) {
    argv_hosts = (argv.hosts || argv.h).split(',');
    tugfile.hosts = tugfile.hosts.filter(function(h) {
      return __indexOf.call(argv_hosts, h) >= 0;
    });
  }

  fs.createReadStream(resolvePath('~/.ssh/config')).pipe(ssh.createParseStream()).on('data', function(_host_data) {
    var host_data, _ref;
    host_data = coerce_sshconf_host(_host_data);
    if (_ref = host_data.host, __indexOf.call(tugfile.hosts, _ref) >= 0) {
      return connect_to_host(host_data);
    }
  });

  coerce_sshconf_host = function(host_data) {
    var coerced_host_data, k, v, _ref;
    coerced_host_data = {};
    _ref = host_data.keywords;
    for (k in _ref) {
      v = _ref[k];
      coerced_host_data[k.toLowerCase()] = v[0];
    }
    return coerced_host_data;
  };

  execute_steps = function(ssh_conn, steps) {};

  connect_to_host = function(host_data) {
    var privateKey, privateKeyFilename, ssh_conn, steps_script;
    privateKeyFilename = host_data.identityfile || '~/.ssh/id_rsa';
    privateKey = require('fs').readFileSync(resolvePath(privateKeyFilename));
    ssh_conn = new require('ssh2')();
    ssh_conn.connect({
      host: host_data.hostname,
      username: host_data.user || process.env.USER,
      privateKey: privateKey
    });
    steps_script = tugfile.steps.map(step_script).join(' && ');
    return ssh_conn.on('ready', function() {
      return ssh_conn.exec(steps_script, function(err, stream) {
        stream.on('data', function(data) {
          return console.log("[" + host_data.host + "]\n" + (data.toString()));
        });
        return stream.on('exit', function() {
          return ssh_conn.end();
        });
      });
    });
  };

}).call(this);
